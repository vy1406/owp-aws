AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS Step Functions Human based task example. It sends an email with an HTTP URL for approval."
Parameters:
  Email:
    Type: String
    Default: "vladimir.elisavetsky@gmail.com"
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: Must be a valid email address.
Resources:
  # Begin API Gateway Resources
  ExecutionApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "Human approval endpoint"
      Description: "HTTP Endpoint backed by API Gateway and Lambda"
      FailOnWarnings: true

  ResourceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResourceTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ExecutionPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvokeStateMachineFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      ResourceId: !Ref ExecutionResource
      RestApiId: !Ref ExecutionApi
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ExecutionApi
      ResourceId: !Ref ExecutionResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  ExecutionResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ExecutionApi
      ParentId: !GetAtt "ExecutionApi.RootResourceId"
      PathPart: execution

  RetrieveResource:
      Type: 'AWS::ApiGateway::Resource'
      Properties:
        RestApiId: !Ref ExecutionApi
        ParentId: !GetAtt "ExecutionApi.RootResourceId"
        PathPart: retrieve

  RetrieveResourcesMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrieveResourcesFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref RetrieveResource
      RestApiId: !Ref ExecutionApi
      MethodResponses:
        - StatusCode: 200      

  ExecutionMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApprovalFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 302
            ResponseParameters:
              method.response.header.Location: "integration.response.body.headers.Location"

      ResourceId: !Ref ExecutionResource
      RestApiId: !Ref ExecutionApi
      MethodResponses:
        - StatusCode: 302
          ResponseParameters:
            method.response.header.Location: true

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayCloudWatchLogsRole.Arn"
  
  ApiGatewayCloudWatchLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

  ExecutionApiStage:
    DependsOn:
      - ApiGatewayAccount
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId: !Ref ExecutionApi
      StageName: states

  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ExecutionMethod
    Properties:
      RestApiId: !Ref ExecutionApi
      StageName: DummyStage
  # End API Gateway Resources

  # Begin
  # Lambda that will be invoked by API Gateway
  InvokeStateMachineFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile:
          Fn::Sub: |
            const { SFN } = require("@aws-sdk/client-sfn");
            exports.handler = async (event) => {
              console.log("1 Event: ", event);
              const stepFunctions = new SFN();
              console.log("2 Event Body: ", event.body);
              const stateMachineArn = process.env.STATE_MACHINE_ARN;

              const params = {
                stateMachineArn,
                input: JSON.stringify(event)
              };

              try {
                const result = await stepFunctions.startExecution(params);
                console.log("Execution started: ", result);
                return {
                  statusCode: 200,
                  body: JSON.stringify({
                    message: "State machine execution started.",
                    executionArn: result.executionArn
                  })
                };
              } catch (error) {
                console.error("Error starting execution: ", error);
                return {
                  statusCode: 500,
                  body: JSON.stringify({
                    message: "Failed to start state machine execution.",
                    error: error.message
                  })
                };
              }
            };

      Handler: "index.handler"
      Runtime: "nodejs18.x"
      Role: !GetAtt InvokeStateMachineExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref HumanApprovalLambdaStateMachine

  LambdaApprovalFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile:
          Fn::Sub: |
            const { SFN: StepFunctions } = require("@aws-sdk/client-sfn");
            const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
            const { DynamoDBDocumentClient, UpdateCommand } = require("@aws-sdk/lib-dynamodb");
            const dynamoDbClient = new DynamoDBClient({});
            const dynamoDb = DynamoDBDocumentClient.from(dynamoDbClient);

            const updateItem = async (id, status) => {
              const params = {
                TableName: process.env.RESOURCE_TABLE,
                Key: {
                  id
                },
                UpdateExpression: "set #s = :s",
                ExpressionAttributeNames: {
                  "#s": "status"
                },
                ExpressionAttributeValues: {
                  ":s": status
                }
              };

              try {
                await dynamoDb.send(new UpdateCommand(params));
                console.log('Successfully updated item in DynamoDB');
              } catch (error) {
                console.error('Error updating item in DynamoDB:', error);
                throw error;
              }
            }
            var redirectToStepFunctions = function(lambdaArn, statemachineName, executionName, callback) {
              const lambdaArnTokens = lambdaArn.split(":");
              const partition = lambdaArnTokens[1];
              const region = lambdaArnTokens[3];
              const accountId = lambdaArnTokens[4];

              const executionArn = "arn:" + partition + ":states:" + region + ":" + accountId + ":execution:" + statemachineName + ":" + executionName;

              const url = "https://console.aws.amazon.com/states/home?region=" + region + "#/executions/details/" + executionArn;
              callback(null, {
                  statusCode: 302,
                  headers: {
                    Location: url
                  }
              });
            };

            exports.handler = (event, context, callback) => {
              console.log('Event= ' + JSON.stringify(event));
              const action = event.queryStringParameters.action;
              const taskToken = event.queryStringParameters.taskToken;
              const statemachineName = event.queryStringParameters.sm;
              const executionName = event.queryStringParameters.ex;
              const itemId = event.queryStringParameters.id;

              const stepfunctions = new StepFunctions();

              var message = "";

              if (action === "approve") {
                message = { "Status": "Approved! Task approved by vladimir.elisavetsky@gmail.com" };
                updateItem(itemId, "Approved");
              } else if (action === "reject") {
                message = { "Status": "Rejected! Task rejected by vladimir.elisavetsky@gmail.com" };
                updateItem(itemId, "Rejected");
              } else {
                updateItem(itemId, "Failed");
                console.error("Unrecognized action. Expected: approve, reject.");
                callback({"Status": "Failed to process the request. Unrecognized Action."});
              }

              stepfunctions.sendTaskSuccess({
                output: JSON.stringify(message),
                taskToken: event.queryStringParameters.taskToken
              })
              .then(function(data) {
                redirectToStepFunctions(context.invokedFunctionArn, statemachineName, executionName, callback);
              }).catch(function(err) {
                console.error(err, err.stack);
                callback(err);
              });
            };
      Description: Lambda function that callback to AWS Step Functions
      FunctionName: LambdaApprovalFunction
      Handler: index.handler
      Role: !GetAtt "LambdaApiGatewayIAMRole.Arn"
      Runtime: nodejs18.x
      Environment:
        Variables:
          RESOURCE_TABLE: !Ref ResourceTable

  InvokeStateMachinePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt InvokeStateMachineFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExecutionApi}/*"

  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaApprovalFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExecutionApi}/*"

  LambdaApiGatewayIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ResourceTable"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:*"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "states:SendTaskFailure"
                  - "states:SendTaskSuccess"
                Resource: "*"
  # End Lambda that will be invoked by API Gateway

  # Begin state machine that publishes to Lambda and sends an email with the link for approval
  HumanApprovalLambdaStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt LambdaStateMachineExecutionRole.Arn
      DefinitionString:
        Fn::Sub: |
          {
              "StartAt": "Lambda Callback",
              "TimeoutSeconds": 3600,
              "States": {
                  "Lambda Callback": {
                      "Type": "Task",
                      "Resource": "arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken",
                      "Parameters": {
                        "FunctionName": "${LambdaHumanApprovalSendEmailFunction.Arn}",
                        "Payload": {
                          "ExecutionContext.$": "$$",
                          "APIGatewayEndpoint": "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
                        }
                      },
                      "Next": "ManualApprovalChoiceState"
                  },
                  "ManualApprovalChoiceState": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Variable": "$.Status",
                        "StringEquals": "Approved! Task approved by ${Email}",
                        "Next": "ApprovedPassState"
                      },
                      {
                        "Variable": "$.Status",
                        "StringEquals": "Rejected! Task rejected by ${Email}",
                        "Next": "RejectedPassState"
                      }
                    ]
                  },
                  "ApprovedPassState": {
                    "Type": "Pass",
                    "End": true
                  },
                  "RejectedPassState": {
                    "Type": "Pass",
                    "End": true
                  }
              }
          }

  SNSHumanApprovalEmailTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
           Endpoint: !Sub ${Email}
           Protocol: email
  
  LambdaHumanApprovalSendEmailFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaSendEmailExecutionRole.Arn
      Runtime: "nodejs18.x"
      Timeout: "25"
      Code:
        ZipFile:
          Fn::Sub: |
            const { SNS } = require("@aws-sdk/client-sns");
            const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
            const { DynamoDBDocumentClient, PutCommand } = require("@aws-sdk/lib-dynamodb");

            const dynamoDbClient = new DynamoDBClient({});
            const dynamoDb = DynamoDBDocumentClient.from(dynamoDbClient);

            const addToDB = async (input) => {
              const params = {
                TableName: process.env.RESOURCE_TABLE,
                Item: {
                  id: input.id,
                  title: input.title,
                  description: input.description,
                  link: input.link,
                  tags: input.tags,
                  submitterEmail: input.submitterEmail,
                  status: 'Pending',
                },
              };

              try {
                await dynamoDb.send(new PutCommand(params));
                console.log('Successfully added to DynamoDB');
              } catch (error) {
                console.error('Error adding to DynamoDB:', error);
                throw error;
              }
            }

            exports.lambda_handler = (event, context, callback) => {

              const fullEvent = JSON.stringify(event, null, 2);
              console.log("Full Event:", fullEvent);
              const executionContext = event.ExecutionContext;
              console.log('executionContext= ' + JSON.stringify(executionContext));

              const executionName = executionContext.Execution.Name;
              const payload = executionContext.Execution.Input;
              addToDB(payload)

              const statemachineName = executionContext.StateMachine.Name;
              const taskToken = executionContext.Task.Token;
              const apigwEndpint = event.APIGatewayEndpoint;
              console.log("-------------------------------");
              console.log("apigwEndpint:", apigwEndpint);
              console.log("payload",payload)
              console.log("executionName",executionName)
              console.log("statemachineName",statemachineName)

              const id = payload.id;
              const approveEndpoint = apigwEndpint + "/execution?action=approve&ex=" + executionName + "&id=" + id + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
              const rejectEndpoint = apigwEndpint + "/execution?action=reject&ex=" + executionName + "&id=" + id + "&sm=" + statemachineName + "&taskToken=" + encodeURIComponent(taskToken);
              const emailSnsTopic = "arn:aws:sns:us-east-1:491085397542:ApiResourceStack-SNSHumanApprovalEmailTopic-kjNyjPxLIcP0";

              var emailMessage = 'Welcome! \n\n';
              emailMessage += 'This is an email requiring an approval for a step functions execution. \n\n'
              emailMessage += 'Check the following information and click "Approve" link if you want to approve. \n\n'
              emailMessage += 'Execution Name -> ' + executionName + '\n\n'
              emailMessage += 'Approve ' + approveEndpoint + '\n\n'
              emailMessage += 'Reject ' + rejectEndpoint + '\n\n'
              emailMessage += 'Thanks for using Step functions!'

              const sns = new SNS();
              var params = {
                Message: emailMessage,
                Subject: "Required approval from AWS Step Functions",
                TopicArn: emailSnsTopic
              };

              sns.publish(params)
                .then(function (data) {
                  console.log("MessageID is " + data.MessageId);
                  callback(null);
                }).catch(
                  function (err) {
                    console.error(err, err.stack);
                    callback(err);
                  });

            };

      Environment:
        Variables:
          RESOURCE_TABLE: !Ref ResourceTable

  RetrieveResourcesFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Runtime: "nodejs18.x"
      Role: !GetAtt LambdaRetrieveRole.Arn
      Code:
        ZipFile: |
          const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
          const { DynamoDBDocumentClient, QueryCommand } = require("@aws-sdk/lib-dynamodb");

          const client = new DynamoDBClient({});
          const docClient = DynamoDBDocumentClient.from(client);

          exports.handler = async (event) => {
            const params = {
              TableName: process.env.RESOURCE_TABLE,
              IndexName: "StatusIndex", 
              KeyConditionExpression: "#status = :approved",
              ExpressionAttributeNames: {
                "#status": "status"
              },
              ExpressionAttributeValues: {
                ":approved": "Approved"
              }
            };

            try {
              const data = await docClient.send(new QueryCommand(params));
              const resources = data.Items.filter(item => item.type === "Resource");
              const services = data.Items.filter(item => item.type === "Service");

              return {
                statusCode: 200,
                body: JSON.stringify({ resources, services })
              };
            } catch (err) {
              return {
                statusCode: 500,
                body: JSON.stringify(err)
              };
            }
          };
      Environment:
        Variables:
          RESOURCE_TABLE: !Ref ResourceTable

  LambdaStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeCallbackLambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !Sub "${LambdaHumanApprovalSendEmailFunction.Arn}"

  InvokeStateMachineExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StartExecutionPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource: "*"
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaSendEmailExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ResourceTable"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
        - PolicyName: SNSSendEmailPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "SNS:Publish"
                Resource: 
                  - !GetAtt SNSHumanApprovalEmailTopic.TopicArn

  LambdaRetrieveRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ResourceTable"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ResourceTable/index/StatusIndex"
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

# End state machine that publishes to Lambda and sends an email with the link for approval
Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${ExecutionApi}.execute-api.${AWS::Region}.amazonaws.com/states"
  StateMachineHumanApprovalArn:
    Value: !Ref HumanApprovalLambdaStateMachine