AWSTemplateFormatVersion: '2010-09-09'
Resources:

  # DynamoDB Table
  ResourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ResourcesTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      
  SubmitResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SubmissionNotificationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  # Step Functions Role
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ProcessApprovalFunction.Arn
                  - !GetAtt NotifyDeclineFunction.Arn

  # Step Functions State Machine
  ManualApprovalStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionsRole.Arn
      DefinitionString: |
        {
          "StartAt": "SendNotification",
          "States": {
            "SendNotification": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:SubmissionNotificationFunction",
              "Next": "WaitForApproval"
            },
            "WaitForApproval": {
              "Type": "Wait",
              "Seconds": 86400,
              "Next": "DecisionState"
            },
            "DecisionState": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.decision",
                  "StringEquals": "approve",
                  "Next": "ProcessApproval"
                },
                {
                  "Variable": "$.decision",
                  "StringEquals": "decline",
                  "Next": "NotifyDecline"
                }
              ],
              "Default": "EndState"
            },
            "ProcessApproval": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ProcessApprovalFunction",
              "End": true
            },
            "NotifyDecline": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:NotifyDeclineFunction",
              "End": true
            },
            "EndState": {
              "Type": "Succeed"
            }
          }
        }

  # API Gateway for Approval/Decline
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ResourceApprovalApi

  SubmitResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: submit
      RestApiId: !Ref ApiGateway

  ApproveResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: approve
      RestApiId: !Ref ApiGateway

  DeclineResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: decline
      RestApiId: !Ref ApiGateway

  SubmitMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SubmitResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubmissionNotificationFunction.Arn}/invocations"

  ApproveMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApproveResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessApprovalFunction.Arn}/invocations"

  DeclineMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref DeclineResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotifyDeclineFunction.Arn}/invocations"

  # Lambda Function to Notify Submission
  SubmissionNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SubmissionNotificationFunction
      Handler: notify.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: notify.zip
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ManualApprovalStateMachine
          ADMIN_EMAIL: 'vladimir.elisavetsky@gmail.com'
          API_ENDPOINT: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
          NOTIFICATION_EMAIL: 'vladimir.elisavetsky@gmail.com'

  # Lambda Function to Process Approval
  ProcessApprovalFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ProcessApprovalFunction
      Handler: approve.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: approve.zip
      Environment:
        Variables:
          RESOURCES_TABLE: !Ref ResourcesTable
          NOTIFICATION_EMAIL: 'vladimir.elisavetsky@gmail.com'

  # Lambda Function to Notify Decline
  NotifyDeclineFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NotifyDeclineFunction
      Handler: decline.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: decline.zip
      Environment:
        Variables:
          NOTIFICATION_EMAIL: 'vladimir.elisavetsky@gmail.com'

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ResourcesTable"
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"

Outputs:
  ApiEndpoint:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/"
    Description: The API endpoint for the application.
