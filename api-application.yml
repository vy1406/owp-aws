AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ApplicationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ApplicationsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  GetApplicationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetApplicationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  GetApplicationByIdFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetApplicationByIdFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  CreateApplicationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CreateApplicationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  UpdateApplicationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UpdateApplicationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  DeleteApplicationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeleteApplicationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ApplicationsTable"
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  GetApplicationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetApplicationFunction
      Handler: get.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: get.zip
      PackageType: Zip
      Environment:
        Variables:
          APPLICATIONS_TABLE: "ApplicationsTable"
          JWT_SECRET: "mysecretkey3"

  GetApplicationByIdFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetApplicationByIdFunction
      Handler: getById.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: getById.zip
      PackageType: Zip
      Environment:
        Variables:
          APPLICATIONS_TABLE: "ApplicationsTable"
          JWT_SECRET: "mysecretkey3"

  CreateApplicationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateApplicationFunction
      Handler: create.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: create.zip
      PackageType: Zip
      Environment:
        Variables:
          APPLICATIONS_TABLE: "ApplicationsTable"
          JWT_SECRET: "mysecretkey3"

  UpdateApplicationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UpdateApplicationFunction
      Handler: update.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: update.zip
      PackageType: Zip
      Environment:
        Variables:
          APPLICATIONS_TABLE: "ApplicationsTable"
          JWT_SECRET: "mysecretkey3"

  DeleteApplicationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteApplicationFunction
      Handler: delete.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: owp-aws-deploy-bucket
        S3Key: delete.zip
      PackageType: Zip
      Environment:
        Variables:
          APPLICATIONS_TABLE: "ApplicationsTable"
          JWT_SECRET: "mysecretkey3"

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ApplicationsApi

  ApplicationsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: applications
      RestApiId: !Ref ApiGateway

  ByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApplicationsResource
      PathPart: "{id}"
      RestApiId: !Ref ApiGateway

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApplicationsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplicationFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  GetByIdMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ByIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetApplicationByIdFunction.Arn}/invocations"
      RequestParameters:
        method.request.path.id: true
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApplicationsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateApplicationFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApplicationsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateApplicationFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  DeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApplicationsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteApplicationFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApplicationsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

Outputs:
  ApiUrl:
    Description: URL of the API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
